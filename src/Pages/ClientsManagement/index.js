import React, { useEffect, useState } from "react";
import {
  Button,
  Card,
  CardBody,
  Col,
  Dropdown,
  DropdownToggle,
  ButtonGroup,
  DropdownMenu,
  DropdownItem,
  Modal,
  ModalHeader,
  ModalBody,
  ModalFooter,
} from "reactstrap";
import Breadcrumbs from "../../components/Common/Breadcrumb";
import axios from "axios";

function ClientManagement() {
  const [requestedData, setRequestedData] = useState([]);
  const [trigger, setTrigger] = useState(0);
  const [dropdownOpen, setDropdownOpen] = useState({});
  const [modal, setModal] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [statusDropdownOpen, setStatusDropdownOpen] = useState(false);

  const toggleDropdown = (id) => {
    setDropdownOpen((prev) => ({
      ...prev,
      [id]: !prev[id],
    }));
  };

  const toggleModal = () => {
    setModal(!modal);
  };

  const handleViewDetails = (plan, clientId) => {
    setSelectedPlan({ ...plan, clientId: clientId });
    toggleModal();
  };

  const toggleStatusDropdown = () => {
    setStatusDropdownOpen(!statusDropdownOpen);
  };

  const handleStatusChange = (newStatus) => {
    if (selectedPlan) {
      axios
        .put(
          `${process.env.REACT_APP_URL}/clientadmin/updaterequestPlan/${selectedPlan?.clientId}`,
          {
            plan: {
              planId: selectedPlan?.planId,
              status: newStatus,
            },
          }
        )
        .then((response) => {
          setTrigger((prev) => prev + 1);
          console.log(response);
        })
        .catch((error) => {
          console.log(error);
        });
      toggleStatusDropdown();
      toggleModal();
    }
  };

  useEffect(() => {
    axios
      .get(`${process.env.REACT_APP_URL}/clientadmin/getClients`)
      .then((response) => {
        setRequestedData(response);

        response.data.forEach((client) => {
          if (client.plan?.status === "requested") {
            alert(
              `Client ${client.firstName} ${client.lastName} has requested the ${client.plan.planId.title} plan.`
            );
          }
        });
      })
      .catch((error) => {
        console.log(error);
      });
  }, [trigger]);

  const handleAccept = (id) => {
    axios
      .put(`${process.env.REACT_APP_URL}/clientadmin/updateClient/${id}`, {
        status: "Accepted",
      })
      .then(() => {
        setTrigger((prev) => prev + 1);
      })
      .catch((error) => {
        console.log(error, "error updating data");
      });
  };

  const handleReject = (id) => {
    axios
      .put(`${process.env.REACT_APP_URL}/clientadmin/updateClient/${id}`, {
        status: "Rejected",
      })
      .then(() => {
        setTrigger((prev) => prev + 1);
      })
      .catch((error) => {
        console.log(error, "error updating data");
      });
  };

  const handleHold = (id) => {
    axios
      .put(`${process.env.REACT_APP_URL}/clientadmin/updateClient/${id}`, {
        status: "Hold",
      })
      .then(() => {
        setTrigger((prev) => prev + 1);
      })
      .catch((error) => {
        console.log(error, "error updating data");
      });
  };

  console.log(selectedPlan, "selectedplan")
  return (
    <React.Fragment>
      <div className="page-content">
        <Breadcrumbs title="aaMOBee" breadcrumbItem="Client Management" />
        <p className="mm-active">
          This is the Client Management page. Here the client data table will be
          fetched and CRUD and permissions can be set by master admin.
        </p>

        <p className="mm-active">Request Generated by Clients</p>
        <Col lg={12}>
          <Card>
            <CardBody>
              <div className="table-responsive">
                <table className="table table-bordered mb-0">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Email</th>
                      <th>Company Name</th>
                      <th>Company Phone</th>
                      <th>Status</th>
                      <th>Plan Title</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {requestedData &&
                      requestedData.map((client) => (
                        <tr key={client._id}>
                          <td>{client.firstName + " " + client.lastName}</td>
                          <td>{client.email}</td>
                          <td>{client.companyName}</td>
                          <td>{client.companyMobile}</td>
                          <td>{client.status}</td>
                          <td>
                          {client.plan ? (
                              <Button
                                color="info"
                                size="sm"
                                onClick={() =>
                                  handleViewDetails(client.plan, client._id)
                                }
                              >
                                View Details
                              </Button>
                            ) : (
                              <span>No plan selected</span>
                            )}
                          </td>
                          <td>
                            <Dropdown
                              isOpen={dropdownOpen[client._id]}
                              toggle={() => toggleDropdown(client._id)}
                            >
                              <DropdownToggle caret color="secondary">
                                Actions
                              </DropdownToggle>
                              <DropdownMenu>
                                <DropdownItem
                                  key="view-details"
                                  onClick={() => handleViewDetails(client.plan)}
                                >
                                  View Details
                                </DropdownItem>
                                {client.status === "Accepted" && (
                                  <DropdownItem
                                    key="pause"
                                    onClick={() => handleHold(client._id)}
                                  >
                                    Pause
                                  </DropdownItem>
                                )}
                                {client.status === "Hold" && (
                                  <DropdownItem
                                    key="resume"
                                    onClick={() => handleAccept(client._id)}
                                  >
                                    Resume
                                  </DropdownItem>
                                )}
                                {client.status === "Rejected" && (
                                  <DropdownItem
                                    key="accept"
                                    onClick={() => handleAccept(client._id)}
                                  >
                                    Accept
                                  </DropdownItem>
                                )}
                                {!["Accepted", "Hold", "Rejected"].includes(
                                  client.status
                                ) && (
                                  <>
                                    <DropdownItem
                                      key="accept"
                                      onClick={() => handleAccept(client._id)}
                                    >
                                      Accept
                                    </DropdownItem>
                                    <DropdownItem
                                      key="reject"
                                      onClick={() => handleReject(client._id)}
                                    >
                                      Reject
                                    </DropdownItem>
                                  </>
                                )}
                              </DropdownMenu>
                            </Dropdown>
                          </td>
                        </tr>
                      ))}
                  </tbody>
                </table>
              </div>
            </CardBody>
          </Card>
        </Col>
      </div>

      {selectedPlan && (
        <Modal isOpen={modal} toggle={toggleModal}>
          <ModalHeader toggle={toggleModal}>
            {selectedPlan.planId.title} Details
          </ModalHeader>
          <ModalBody>
            <p>
              <strong>Description:</strong> {selectedPlan.planId.caption}
            </p>
            <p>
              <strong>Price:</strong> {selectedPlan.planId.price}
            </p>
            <p>
              <strong>Status:</strong> {selectedPlan.status}
            </p>
            <div style={{ marginTop: "10px" }}>
              <Button
                color="primary"
                onClick={toggleStatusDropdown}
                style={{ marginBottom: "10px" }}
              >
                Edit
              </Button>
              {statusDropdownOpen && (
                <Dropdown
                  isOpen={statusDropdownOpen}
                  toggle={toggleStatusDropdown}
                  direction="down"
                >
                  <DropdownToggle
                    caret
                    color="secondary"
                    style={{ width: "100%" }}
                  >
                    Select Status
                  </DropdownToggle>
                  <DropdownMenu>
                    <DropdownItem
                      onClick={() => handleStatusChange("requested")}
                    >
                      Requested
                    </DropdownItem>
                    <DropdownItem onClick={() => handleStatusChange("active")}>
                      Active
                    </DropdownItem>
                    <DropdownItem
                      onClick={() => handleStatusChange("inactive")}
                    >
                      Inactive
                    </DropdownItem>
                    <DropdownItem onClick={() => handleStatusChange("expired")}>
                      Expired
                    </DropdownItem>
                  </DropdownMenu>
                </Dropdown>
              )}
            </div>
          </ModalBody>
          <ModalFooter>
            <Button color="secondary" onClick={toggleModal}>
              Close
            </Button>
          </ModalFooter>
        </Modal>
      )}
    </React.Fragment>
  );
}

export default ClientManagement;
