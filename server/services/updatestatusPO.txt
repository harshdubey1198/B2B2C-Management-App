ProductionOrderServices.updateProductionOrderStatus = async (id, body) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const { status, notes } = body;
    const order = await ProductionOrder.findById(id)
      .populate("rawMaterials.itemId", "name")
      .populate("bomId")
      .session(session);

    if (!order) {
      throw new Error("Production Order not found");
    }

    const allowedTransitions = {
      created: ["in_progress", "cancelled", "completed"],
      in_progress: ["completed", "cancelled"],
      completed: [],
      cancelled: [],
    };

    if (!allowedTransitions[order.status].includes(status)) {
      throw new Error(
        `Invalid status transition from ${order.status} to ${status}`
      );
    }

    if (status === "cancelled") {
      for (const material of order.rawMaterials) {
        const inventoryItem = await InventoryItem.findById(
          material.itemId
        ).session(session);
        if (!inventoryItem) {
          throw new Error(`Raw material with ID ${material.itemId} not found`);
        }

        if (inventoryItem.variants && inventoryItem.variants.length > 0) {
          for (const variant of material.variants) {
            const variantIndex = inventoryItem.variants.findIndex(
              (v) => v._id.toString() === variant.variantId
            );
            if (variantIndex === -1) {
              throw new Error(
                `Variant with ID ${variant.variantId} not found for item ${inventoryItem.name}`
              );
            }
            inventoryItem.variants[variantIndex].stock += variant.quantity;
          }
          inventoryItem.quantity = inventoryItem.variants.reduce(
            (total, variant) => total + variant.stock,
            0
          );
        } else {
          inventoryItem.quantity += material.quantity;
        }
        await inventoryItem.save({ session });
      }
    }


    if (status === "cancelled") {
      const wasteRecords = await WasteManagement.find({
        productionOrderId: id,
      }).session(session);
      for (const waste of wasteRecords) {
        waste.status = "cancelled";
        await waste.save({ session });
      }
    }

    if (status === "completed") {
      const bom = order.bomId;
      if (!bom) {
        throw new Error("Associated BOM not found.");
      }

      const rawMaterialNames = order.rawMaterials
        .map((material) => material.itemId?.name)
        .filter(Boolean);
      const description = `Manufactured product using: ${rawMaterialNames.join(
        ", "
      )}`;

    
      let existingProduct = await InventoryItem.findOne({
        name: bom.productName,
        firmId: order.firmId, 
      }).session(session);

      if (existingProduct) {

        existingProduct.quantity += order.quantity;
        await existingProduct.save({ session });
      } else {

        const finishedProduct = new InventoryItem({
          name: bom.productName,
          description,
          quantity: order.quantity,
          qtyType: bom.qtyType,
          type: "finished_good",
          manufacturer: bom.manufacturer,
          brand: bom.brand,
          costPrice: bom.totalCostPrice,
          sellingPrice: bom.sellingPrice,
          categoryId: bom.categoryId,
          subcategoryId: bom.subcategoryId,
          ProductHsn: bom.ProductHsn,
          firmId: order.firmId,
          createdBy: order.createdBy,
          vendor: bom.vendor,
          tax: {
            taxId: bom.tax?.taxId,
            selectedTaxTypes: bom.tax?.selectedTaxTypes || [],
          },
          deleted_at: null,
        });
        await finishedProduct.save({ session });
      }
    }

    order.status = status;
    order.notes.push(notes);
    await order.save({ session });

    await session.commitTransaction();
    session.endSession();

    return order;
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    throw error;
  }
};